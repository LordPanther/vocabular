class DailyWord {
  final String word;
  final List<Phonetic> phonetics;
  final List<Meaning> meanings;

  DailyWord({required this.word, required this.phonetics, required this.meanings});

  factory Word.fromJson(Map<String, dynamic> json) {
    return Word(
      word: json['word'] as String,
      phonetics:
          (json['phonetics'] as List).map((e) => Phonetic.fromJson(e)).toList(),
      meanings:
          (json['meanings'] as List).map((e) => Meaning.fromJson(e)).toList(),
    );
  }

  static Word fromMap(Map<String, dynamic> data) {
    return Word(
      word: data["name"] ?? "",
      phonetics: data["phonetics"] ?? "",
      meanings: data["meanings"] ?? "",
    );
  }

  Map<String, dynamic> toMap(String id) {
    return {
      "id": id,
      "word": word,
      "phonetics": phonetics,
      "meanings": meanings,
    };
  }
}

class Phonetic {
  final String text;
  final String audio;
  final String sourceUrl;

  Phonetic({required this.text, required this.audio, required this.sourceUrl});

  factory Phonetic.fromJson(Map<String, dynamic> json) {
    return Phonetic(
      text: json['text'] as String,
      audio: json['audio'] as String,
      sourceUrl: json['sourceUrl'] as String,
    );
  }
}

class Meaning {
  final String partOfSpeech;
  final List<Definition> definitions;

  Meaning({required this.partOfSpeech, required this.definitions});

  factory Meaning.fromJson(Map<String, dynamic> json) {
    return Meaning(
      partOfSpeech: json['partOfSpeech'] as String,
      definitions: (json['definitions'] as List)
          .map((e) => Definition.fromJson(e))
          .toList(),
    );
  }
}

class Definition {
  final String definition;
  final List<String> synonyms;
  final List<String> antonyms;

  Definition(
      {required this.definition,
      required this.synonyms,
      required this.antonyms});

  factory Definition.fromJson(Map<String, dynamic> json) {
    return Definition(
      definition: json['definition'] as String,
      synonyms: (json['synonyms'] as List<String>).toList(),
      antonyms: (json['antonyms'] as List<String>).toList(),
    );
  }
}
